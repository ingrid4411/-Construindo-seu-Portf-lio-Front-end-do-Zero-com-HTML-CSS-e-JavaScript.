// Script básico para interação do portfólio
document.addEventListener('DOMContentLoaded', function () {
    // Inserir ano no footer
    const yearEl = document.getElementById('year');
    if (yearEl) yearEl.textContent = new Date().getFullYear();

    // Toggle do menu mobile
    const navToggle = document.querySelector('.nav-toggle');
    const mainNav = document.getElementById('main-nav');
    if (navToggle && mainNav) {
        navToggle.addEventListener('click', () => {
            const expanded = navToggle.getAttribute('aria-expanded') === 'true';
            navToggle.setAttribute('aria-expanded', String(!expanded));
            // Usa atributo para controle via CSS
            mainNav.setAttribute('aria-open', String(!expanded));
        });
    }

    // Modal de projetos
    const modal = document.getElementById('project-modal');
    const modalTitle = document.getElementById('modal-title');
    const modalDesc = document.getElementById('modal-desc');
    const modalTech = document.getElementById('modal-tech');
    const closeBtn = document.querySelector('.modal-close');

    const projectsData = {
        1: {
            title: 'Fashion Store - Loja Virtual',
            desc: 'E-commerce completo desenvolvido com foco em moda. Features: carrinho de compras com localStorage, filtros dinâmicos por categoria/tamanho/cor, página de produto com zoom e variações, checkout integrado e área do cliente. Design responsivo otimizado para conversão.',
            tech: 'HTML5, CSS3 (Grid/Flexbox), JavaScript ES6+, API REST',
            repo: 'https://github.com/ingrid4411/fashion-store'
        },
        2: {
            title: 'PhotoGrid Pro - Galeria Responsiva',
            desc: 'Galeria de fotos profissional com layout grid dinâmico. Features: lightbox customizado, lazy loading de imagens, filtros CSS aplicáveis em tempo real, compartilhamento social e interface para upload de múltiplas fotos. Foco em performance e UX.',
            tech: 'HTML5, CSS3 (Grid), JavaScript, Web Storage API, Intersection Observer',
            repo: 'https://github.com/ingrid4411/photo-grid'
        },
        3: {
            title: 'Dashboard Analytics',
            desc: 'Dashboard interativo para visualização de dados em tempo real. Features: gráficos dinâmicos com Chart.js, tema claro/escuro, filtros por período, exportação de relatórios PDF e integração com API de dados. Layout responsivo com grid system.',
            tech: 'HTML5, CSS3, JavaScript, Chart.js, REST APIs',
            repo: 'https://github.com/ingrid4411/dashboard-analytics'
        }
    };

    document.querySelectorAll('[data-project]').forEach(btn => {
        btn.addEventListener('click', () => {
            const id = btn.getAttribute('data-project');
            const data = projectsData[id];
            if (data && modal) {
                modalTitle.textContent = data.title;
                modalDesc.textContent = data.desc;
                modalTech.textContent = 'Tecnologias: ' + data.tech;
                const modalRepo = document.getElementById('modal-repo');
                if (modalRepo && data.repo) {
                    modalRepo.href = data.repo;
                    modalRepo.style.display = 'inline-flex';
                } else if (modalRepo) {
                    modalRepo.style.display = 'none';
                }
                modal.setAttribute('aria-hidden', 'false');
            }
        });
    });

    function closeModal() {
        if (modal) modal.setAttribute('aria-hidden', 'true');
    }
    if (closeBtn) closeBtn.addEventListener('click', closeModal);
    if (modal) modal.addEventListener('click', (e) => { if (e.target === modal) closeModal(); });

    // Formulário: demonstração simples (não envia realmente)
    const form = document.getElementById('contact-form');
    if (form) {
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            const btn = form.querySelector('button[type="submit"]');
            btn.textContent = 'Enviando...';
            setTimeout(() => { btn.textContent = 'Enviar'; alert('Obrigado! Sua mensagem foi recebida (demo).'); form.reset(); }, 800);
        });
    }
});
